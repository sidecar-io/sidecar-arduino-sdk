<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.9.1"/>
<title>QSense Sidecar Library: qsense::AutoPtr&lt; C &gt; Class Template Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">QSense Sidecar Library
   &#160;<span id="projectnumber">1.0.0</span>
   </div>
   <div id="projectbrief">Developed for QSense</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.9.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.xhtml"><span>Class&#160;List</span></a></li>
      <li><a href="classes.xhtml"><span>Class&#160;Index</span></a></li>
      <li><a href="inherits.xhtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.xhtml"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classqsense_1_1_auto_ptr.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="classqsense_1_1_auto_ptr-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">qsense::AutoPtr&lt; C &gt; Class Template Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><a class="el" href="classqsense_1_1_auto_ptr.xhtml" title="AutoPtr is a &quot;smart&quot; pointer for classes implementing reference counting based garbage collection...">AutoPtr</a> is a "smart" pointer for classes implementing reference counting based garbage collection.  
 <a href="classqsense_1_1_auto_ptr.xhtml#details">More...</a></p>

<p><code>#include &lt;AutoPtr.h&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a62a648149ae56d99165b69220f6ba670"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classqsense_1_1_auto_ptr.xhtml#a62a648149ae56d99165b69220f6ba670">AutoPtr</a> ()</td></tr>
<tr class="memdesc:a62a648149ae56d99165b69220f6ba670"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor. Creates a new instance that points to nothing.  <a href="#a62a648149ae56d99165b69220f6ba670">More...</a><br /></td></tr>
<tr class="separator:a62a648149ae56d99165b69220f6ba670"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aecac48b004d4d4b6d0314111ff73c926"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classqsense_1_1_auto_ptr.xhtml#aecac48b004d4d4b6d0314111ff73c926">AutoPtr</a> (C *ptr)</td></tr>
<tr class="memdesc:aecac48b004d4d4b6d0314111ff73c926"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create an auto pointer that takes ownership of the specified pointer.  <a href="#aecac48b004d4d4b6d0314111ff73c926">More...</a><br /></td></tr>
<tr class="separator:aecac48b004d4d4b6d0314111ff73c926"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad1c80c422ad7b1ce9d3baeee86dc873a"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classqsense_1_1_auto_ptr.xhtml#ad1c80c422ad7b1ce9d3baeee86dc873a">AutoPtr</a> (C *ptr, bool shared)</td></tr>
<tr class="memdesc:ad1c80c422ad7b1ce9d3baeee86dc873a"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classqsense_1_1_auto_ptr.xhtml" title="AutoPtr is a &quot;smart&quot; pointer for classes implementing reference counting based garbage collection...">AutoPtr</a> Create an auto pointer that takes ownership of the specified pointer.  <a href="#ad1c80c422ad7b1ce9d3baeee86dc873a">More...</a><br /></td></tr>
<tr class="separator:ad1c80c422ad7b1ce9d3baeee86dc873a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a92863a13324b1154a95e3e69ebfc2aac"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classqsense_1_1_auto_ptr.xhtml#a92863a13324b1154a95e3e69ebfc2aac">AutoPtr</a> (const <a class="el" href="classqsense_1_1_auto_ptr.xhtml">AutoPtr</a> &amp;ptr)</td></tr>
<tr class="memdesc:a92863a13324b1154a95e3e69ebfc2aac"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy constructor. Increases the reference count for the owned object.  <a href="#a92863a13324b1154a95e3e69ebfc2aac">More...</a><br /></td></tr>
<tr class="separator:a92863a13324b1154a95e3e69ebfc2aac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1c7f4dfe2c927919b6789baf7b766240"><td class="memTemplParams" colspan="2">template&lt;class Other &gt; </td></tr>
<tr class="memitem:a1c7f4dfe2c927919b6789baf7b766240"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classqsense_1_1_auto_ptr.xhtml#a1c7f4dfe2c927919b6789baf7b766240">AutoPtr</a> (const <a class="el" href="classqsense_1_1_auto_ptr.xhtml">AutoPtr</a>&lt; Other &gt; &amp;ptr)</td></tr>
<tr class="memdesc:a1c7f4dfe2c927919b6789baf7b766240"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy constructor for taking ownership of another type of object.  <a href="#a1c7f4dfe2c927919b6789baf7b766240">More...</a><br /></td></tr>
<tr class="separator:a1c7f4dfe2c927919b6789baf7b766240"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa16d9313727fe18952ce7e7715fbb819"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classqsense_1_1_auto_ptr.xhtml#aa16d9313727fe18952ce7e7715fbb819">~AutoPtr</a> ()</td></tr>
<tr class="memdesc:aa16d9313727fe18952ce7e7715fbb819"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destructor. Invokes <code>release</code> on the owned object.  <a href="#aa16d9313727fe18952ce7e7715fbb819">More...</a><br /></td></tr>
<tr class="separator:aa16d9313727fe18952ce7e7715fbb819"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac86871e59ce348e77bfb43933cbf5d31"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classqsense_1_1_auto_ptr.xhtml">AutoPtr</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classqsense_1_1_auto_ptr.xhtml#ac86871e59ce348e77bfb43933cbf5d31">assign</a> (C *ptr)</td></tr>
<tr class="memdesc:ac86871e59ce348e77bfb43933cbf5d31"><td class="mdescLeft">&#160;</td><td class="mdescRight">Use to (re)set the owned object. If current owned object is not <code>null</code>, invokes <code>release</code> on the object.  <a href="#ac86871e59ce348e77bfb43933cbf5d31">More...</a><br /></td></tr>
<tr class="separator:ac86871e59ce348e77bfb43933cbf5d31"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2c466fc20f28d467c559c30d148f3c1e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classqsense_1_1_auto_ptr.xhtml">AutoPtr</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classqsense_1_1_auto_ptr.xhtml#a2c466fc20f28d467c559c30d148f3c1e">assign</a> (C *ptr, bool shared)</td></tr>
<tr class="memdesc:a2c466fc20f28d467c559c30d148f3c1e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reset the owned object. If current owned object is not <code>null</code>, invokes <code>release</code> on the object. Will invoke <code>duplicate</code> on the new instance if <code>shared</code> is specified.  <a href="#a2c466fc20f28d467c559c30d148f3c1e">More...</a><br /></td></tr>
<tr class="separator:a2c466fc20f28d467c559c30d148f3c1e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af254ae757efe5672e1ea1c0f4f7d15c2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classqsense_1_1_auto_ptr.xhtml">AutoPtr</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classqsense_1_1_auto_ptr.xhtml#af254ae757efe5672e1ea1c0f4f7d15c2">assign</a> (const <a class="el" href="classqsense_1_1_auto_ptr.xhtml">AutoPtr</a> &amp;ptr)</td></tr>
<tr class="memdesc:af254ae757efe5672e1ea1c0f4f7d15c2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Share the pointer owned by the specified auto pointer instance.  <a href="#af254ae757efe5672e1ea1c0f4f7d15c2">More...</a><br /></td></tr>
<tr class="separator:af254ae757efe5672e1ea1c0f4f7d15c2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af79bab167944713a7b00478f96d92034"><td class="memTemplParams" colspan="2">template&lt;class Other &gt; </td></tr>
<tr class="memitem:af79bab167944713a7b00478f96d92034"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classqsense_1_1_auto_ptr.xhtml">AutoPtr</a> &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classqsense_1_1_auto_ptr.xhtml#af79bab167944713a7b00478f96d92034">assign</a> (const <a class="el" href="classqsense_1_1_auto_ptr.xhtml">AutoPtr</a>&lt; Other &gt; &amp;ptr)</td></tr>
<tr class="memdesc:af79bab167944713a7b00478f96d92034"><td class="mdescLeft">&#160;</td><td class="mdescRight">Share the pointer owned by the specified auto pointer of different type.  <a href="#af79bab167944713a7b00478f96d92034">More...</a><br /></td></tr>
<tr class="separator:af79bab167944713a7b00478f96d92034"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6ba8079f3e9d5e7dc91e6541fc864e2c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classqsense_1_1_auto_ptr.xhtml">AutoPtr</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classqsense_1_1_auto_ptr.xhtml#a6ba8079f3e9d5e7dc91e6541fc864e2c">operator=</a> (C *ptr)</td></tr>
<tr class="memdesc:a6ba8079f3e9d5e7dc91e6541fc864e2c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy assignment operator. Delegates to <a class="el" href="classqsense_1_1_auto_ptr.xhtml#ac86871e59ce348e77bfb43933cbf5d31">assign</a>.  <a href="#a6ba8079f3e9d5e7dc91e6541fc864e2c">More...</a><br /></td></tr>
<tr class="separator:a6ba8079f3e9d5e7dc91e6541fc864e2c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afd3822ecfb0ce43a152c783f193c2907"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classqsense_1_1_auto_ptr.xhtml">AutoPtr</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classqsense_1_1_auto_ptr.xhtml#afd3822ecfb0ce43a152c783f193c2907">operator=</a> (const <a class="el" href="classqsense_1_1_auto_ptr.xhtml">AutoPtr</a> &amp;ptr)</td></tr>
<tr class="memdesc:afd3822ecfb0ce43a152c783f193c2907"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy assignment operator. Delegates to <a class="el" href="classqsense_1_1_auto_ptr.xhtml#ac86871e59ce348e77bfb43933cbf5d31">assign</a>.  <a href="#afd3822ecfb0ce43a152c783f193c2907">More...</a><br /></td></tr>
<tr class="separator:afd3822ecfb0ce43a152c783f193c2907"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8ae3da83de4d1b40472ea38a91cdf74d"><td class="memTemplParams" colspan="2">template&lt;class Other &gt; </td></tr>
<tr class="memitem:a8ae3da83de4d1b40472ea38a91cdf74d"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classqsense_1_1_auto_ptr.xhtml">AutoPtr</a> &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classqsense_1_1_auto_ptr.xhtml#a8ae3da83de4d1b40472ea38a91cdf74d">operator=</a> (const <a class="el" href="classqsense_1_1_auto_ptr.xhtml">AutoPtr</a>&lt; Other &gt; &amp;ptr)</td></tr>
<tr class="memdesc:a8ae3da83de4d1b40472ea38a91cdf74d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy assignment operator. Delegates to <a class="el" href="classqsense_1_1_auto_ptr.xhtml#ac86871e59ce348e77bfb43933cbf5d31">assign</a>.  <a href="#a8ae3da83de4d1b40472ea38a91cdf74d">More...</a><br /></td></tr>
<tr class="separator:a8ae3da83de4d1b40472ea38a91cdf74d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3c39d34dfefc3e70cc03ef8331b0bde6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classqsense_1_1_auto_ptr.xhtml#a3c39d34dfefc3e70cc03ef8331b0bde6">swap</a> (<a class="el" href="classqsense_1_1_auto_ptr.xhtml">AutoPtr</a> &amp;ptr)</td></tr>
<tr class="memdesc:a3c39d34dfefc3e70cc03ef8331b0bde6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Swap the pointers of this instance with the specified instance.  <a href="#a3c39d34dfefc3e70cc03ef8331b0bde6">More...</a><br /></td></tr>
<tr class="separator:a3c39d34dfefc3e70cc03ef8331b0bde6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a92aa90a7ecfea8212f16f1aa9aba8dc7"><td class="memTemplParams" colspan="2">template&lt;class Other &gt; </td></tr>
<tr class="memitem:a92aa90a7ecfea8212f16f1aa9aba8dc7"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classqsense_1_1_auto_ptr.xhtml">AutoPtr</a>&lt; Other &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classqsense_1_1_auto_ptr.xhtml#a92aa90a7ecfea8212f16f1aa9aba8dc7">cast</a> () const </td></tr>
<tr class="memdesc:a92aa90a7ecfea8212f16f1aa9aba8dc7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Casts the <a class="el" href="classqsense_1_1_auto_ptr.xhtml" title="AutoPtr is a &quot;smart&quot; pointer for classes implementing reference counting based garbage collection...">AutoPtr</a> via a dynamic cast to the given type. Returns an <a class="el" href="classqsense_1_1_auto_ptr.xhtml" title="AutoPtr is a &quot;smart&quot; pointer for classes implementing reference counting based garbage collection...">AutoPtr</a> containing NULL if the cast fails. Example: (assume class Sub: public Super) AutoPtr&lt;Super&gt; super(new Sub()); AutoPtr&lt;Sub&gt; sub = super.cast&lt;Sub&gt;(); poco_assert (sub.get());.  <a href="#a92aa90a7ecfea8212f16f1aa9aba8dc7">More...</a><br /></td></tr>
<tr class="separator:a92aa90a7ecfea8212f16f1aa9aba8dc7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afd0882c46ad8d89747a0eb64f35310ef"><td class="memTemplParams" colspan="2">template&lt;class Other &gt; </td></tr>
<tr class="memitem:afd0882c46ad8d89747a0eb64f35310ef"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classqsense_1_1_auto_ptr.xhtml">AutoPtr</a>&lt; Other &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classqsense_1_1_auto_ptr.xhtml#afd0882c46ad8d89747a0eb64f35310ef">unsafeCast</a> () const </td></tr>
<tr class="memdesc:afd0882c46ad8d89747a0eb64f35310ef"><td class="mdescLeft">&#160;</td><td class="mdescRight">Casts the <a class="el" href="classqsense_1_1_auto_ptr.xhtml" title="AutoPtr is a &quot;smart&quot; pointer for classes implementing reference counting based garbage collection...">AutoPtr</a> via a static cast to the given type. Example: (assume class Sub: public Super) AutoPtr&lt;Super&gt; super(new Sub()); AutoPtr&lt;Sub&gt; sub = super.unsafeCast&lt;Sub&gt;(); poco_assert (sub.get());.  <a href="#afd0882c46ad8d89747a0eb64f35310ef">More...</a><br /></td></tr>
<tr class="separator:afd0882c46ad8d89747a0eb64f35310ef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1b4a4a6b09ff47f390c8e86105d4e353"><td class="memItemLeft" align="right" valign="top">C *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classqsense_1_1_auto_ptr.xhtml#a1b4a4a6b09ff47f390c8e86105d4e353">operator-&gt;</a> ()</td></tr>
<tr class="memdesc:a1b4a4a6b09ff47f390c8e86105d4e353"><td class="mdescLeft">&#160;</td><td class="mdescRight">Pointer acess operator for the owned object. Returns <code>NULL</code> if invalid.  <a href="#a1b4a4a6b09ff47f390c8e86105d4e353">More...</a><br /></td></tr>
<tr class="separator:a1b4a4a6b09ff47f390c8e86105d4e353"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac0653e3314b373570a5ccf9251e1d902"><td class="memItemLeft" align="right" valign="top">const C *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classqsense_1_1_auto_ptr.xhtml#ac0653e3314b373570a5ccf9251e1d902">operator-&gt;</a> () const </td></tr>
<tr class="memdesc:ac0653e3314b373570a5ccf9251e1d902"><td class="mdescLeft">&#160;</td><td class="mdescRight">Pointer acess operator for the owned object. Returns <code>NULL</code> if invalid.  <a href="#ac0653e3314b373570a5ccf9251e1d902">More...</a><br /></td></tr>
<tr class="separator:ac0653e3314b373570a5ccf9251e1d902"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6365e7ebb94d4d9f54be0aec65f44d86"><td class="memItemLeft" align="right" valign="top">C &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classqsense_1_1_auto_ptr.xhtml#a6365e7ebb94d4d9f54be0aec65f44d86">operator*</a> ()</td></tr>
<tr class="memdesc:a6365e7ebb94d4d9f54be0aec65f44d86"><td class="mdescLeft">&#160;</td><td class="mdescRight">Dereference operator for the owned object. Will lead to program termination if the owned object is not valid.  <a href="#a6365e7ebb94d4d9f54be0aec65f44d86">More...</a><br /></td></tr>
<tr class="separator:a6365e7ebb94d4d9f54be0aec65f44d86"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7a9da506d793ffad0f1f8e7f3836e527"><td class="memItemLeft" align="right" valign="top">const C &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classqsense_1_1_auto_ptr.xhtml#a7a9da506d793ffad0f1f8e7f3836e527">operator*</a> () const </td></tr>
<tr class="memdesc:a7a9da506d793ffad0f1f8e7f3836e527"><td class="mdescLeft">&#160;</td><td class="mdescRight">Dereference operator for the owned object. Will lead to program termination if the owned object is not valid.  <a href="#a7a9da506d793ffad0f1f8e7f3836e527">More...</a><br /></td></tr>
<tr class="separator:a7a9da506d793ffad0f1f8e7f3836e527"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acf8aa7f7fab1f946b9815d7d8e2f3f6d"><td class="memItemLeft" align="right" valign="top">C *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classqsense_1_1_auto_ptr.xhtml#acf8aa7f7fab1f946b9815d7d8e2f3f6d">get</a> ()</td></tr>
<tr class="memdesc:acf8aa7f7fab1f946b9815d7d8e2f3f6d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the owned pointer. Callers must not <code>delete</code>.  <a href="#acf8aa7f7fab1f946b9815d7d8e2f3f6d">More...</a><br /></td></tr>
<tr class="separator:acf8aa7f7fab1f946b9815d7d8e2f3f6d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8ed3fa1c5a9eb5487d570ddf63267b2e"><td class="memItemLeft" align="right" valign="top">const C *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classqsense_1_1_auto_ptr.xhtml#a8ed3fa1c5a9eb5487d570ddf63267b2e">get</a> () const </td></tr>
<tr class="memdesc:a8ed3fa1c5a9eb5487d570ddf63267b2e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the owned pointer. Callers must not <code>delete</code>.  <a href="#a8ed3fa1c5a9eb5487d570ddf63267b2e">More...</a><br /></td></tr>
<tr class="separator:a8ed3fa1c5a9eb5487d570ddf63267b2e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaecea6dd3b2c3e754865c429e0243bd3"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classqsense_1_1_auto_ptr.xhtml#aaecea6dd3b2c3e754865c429e0243bd3">operator C *</a> ()</td></tr>
<tr class="memdesc:aaecea6dd3b2c3e754865c429e0243bd3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function operator. Return the owned pointer.  <a href="#aaecea6dd3b2c3e754865c429e0243bd3">More...</a><br /></td></tr>
<tr class="separator:aaecea6dd3b2c3e754865c429e0243bd3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a07ed87163c03adb70b842a94ec39610c"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classqsense_1_1_auto_ptr.xhtml#a07ed87163c03adb70b842a94ec39610c">operator const C *</a> () const </td></tr>
<tr class="memdesc:a07ed87163c03adb70b842a94ec39610c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function operator. Return the owned pointer.  <a href="#a07ed87163c03adb70b842a94ec39610c">More...</a><br /></td></tr>
<tr class="separator:a07ed87163c03adb70b842a94ec39610c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa020727f8b9610af4191e05b0535b7e3"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classqsense_1_1_auto_ptr.xhtml#aa020727f8b9610af4191e05b0535b7e3">operator!</a> () const </td></tr>
<tr class="memdesc:aa020727f8b9610af4191e05b0535b7e3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Negative check of make sure the owned pointer is not valid.  <a href="#aa020727f8b9610af4191e05b0535b7e3">More...</a><br /></td></tr>
<tr class="separator:aa020727f8b9610af4191e05b0535b7e3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a469b4702939d37f6851ccb73deb197f6"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classqsense_1_1_auto_ptr.xhtml#a469b4702939d37f6851ccb73deb197f6">isNull</a> () const </td></tr>
<tr class="memdesc:a469b4702939d37f6851ccb73deb197f6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Negative check of make sure the owned pointer is not valid.  <a href="#a469b4702939d37f6851ccb73deb197f6">More...</a><br /></td></tr>
<tr class="separator:a469b4702939d37f6851ccb73deb197f6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9ba2ea5428ba1fc04c96101ae4597f07"><td class="memItemLeft" align="right" valign="top">C *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classqsense_1_1_auto_ptr.xhtml#a9ba2ea5428ba1fc04c96101ae4597f07">duplicate</a> ()</td></tr>
<tr class="memdesc:a9ba2ea5428ba1fc04c96101ae4597f07"><td class="mdescLeft">&#160;</td><td class="mdescRight">Invokes <code><a class="el" href="classqsense_1_1_auto_ptr.xhtml#a9ba2ea5428ba1fc04c96101ae4597f07" title="Invokes duplicate() on the owned pointer if valid. ">duplicate()</a></code> on the owned pointer if valid.  <a href="#a9ba2ea5428ba1fc04c96101ae4597f07">More...</a><br /></td></tr>
<tr class="separator:a9ba2ea5428ba1fc04c96101ae4597f07"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1315b4fbaaa9b111f3e96fd7f3a95d2d"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classqsense_1_1_auto_ptr.xhtml#a1315b4fbaaa9b111f3e96fd7f3a95d2d">operator==</a> (const <a class="el" href="classqsense_1_1_auto_ptr.xhtml">AutoPtr</a> &amp;ptr) const </td></tr>
<tr class="memdesc:a1315b4fbaaa9b111f3e96fd7f3a95d2d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compare the owned objects for equality.  <a href="#a1315b4fbaaa9b111f3e96fd7f3a95d2d">More...</a><br /></td></tr>
<tr class="separator:a1315b4fbaaa9b111f3e96fd7f3a95d2d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a71842ceaad911fc2f38d4200bb52f4b4"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classqsense_1_1_auto_ptr.xhtml#a71842ceaad911fc2f38d4200bb52f4b4">operator==</a> (const C *ptr) const </td></tr>
<tr class="memdesc:a71842ceaad911fc2f38d4200bb52f4b4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compare the owned object against the specified object for equality.  <a href="#a71842ceaad911fc2f38d4200bb52f4b4">More...</a><br /></td></tr>
<tr class="separator:a71842ceaad911fc2f38d4200bb52f4b4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a22ae8819d5a8db7b06d0f62e423a788d"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classqsense_1_1_auto_ptr.xhtml#a22ae8819d5a8db7b06d0f62e423a788d">operator==</a> (C *ptr) const </td></tr>
<tr class="memdesc:a22ae8819d5a8db7b06d0f62e423a788d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compare the owned object against the specified object for equality.  <a href="#a22ae8819d5a8db7b06d0f62e423a788d">More...</a><br /></td></tr>
<tr class="separator:a22ae8819d5a8db7b06d0f62e423a788d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a19da37b40aeb001b5aea2bd69b0b46e0"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classqsense_1_1_auto_ptr.xhtml#a19da37b40aeb001b5aea2bd69b0b46e0">operator!=</a> (const <a class="el" href="classqsense_1_1_auto_ptr.xhtml">AutoPtr</a> &amp;ptr) const </td></tr>
<tr class="memdesc:a19da37b40aeb001b5aea2bd69b0b46e0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compare the owned objects for inequality.  <a href="#a19da37b40aeb001b5aea2bd69b0b46e0">More...</a><br /></td></tr>
<tr class="separator:a19da37b40aeb001b5aea2bd69b0b46e0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0df38164d7925094c89be45562eb9ac7"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classqsense_1_1_auto_ptr.xhtml#a0df38164d7925094c89be45562eb9ac7">operator!=</a> (const C *ptr) const </td></tr>
<tr class="memdesc:a0df38164d7925094c89be45562eb9ac7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compare the owned object against the specified object for inequality.  <a href="#a0df38164d7925094c89be45562eb9ac7">More...</a><br /></td></tr>
<tr class="separator:a0df38164d7925094c89be45562eb9ac7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7931321d84723ab6a180c1fd7e7bbcd3"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classqsense_1_1_auto_ptr.xhtml#a7931321d84723ab6a180c1fd7e7bbcd3">operator!=</a> (C *ptr) const </td></tr>
<tr class="memdesc:a7931321d84723ab6a180c1fd7e7bbcd3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compare the owned object against the specified object for inequality.  <a href="#a7931321d84723ab6a180c1fd7e7bbcd3">More...</a><br /></td></tr>
<tr class="separator:a7931321d84723ab6a180c1fd7e7bbcd3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a69f0ab9a754721b5d19c8b112f5b8b8e"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classqsense_1_1_auto_ptr.xhtml#a69f0ab9a754721b5d19c8b112f5b8b8e">operator&lt;</a> (const <a class="el" href="classqsense_1_1_auto_ptr.xhtml">AutoPtr</a> &amp;ptr) const </td></tr>
<tr class="memdesc:a69f0ab9a754721b5d19c8b112f5b8b8e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compare the owned objects for ordering.  <a href="#a69f0ab9a754721b5d19c8b112f5b8b8e">More...</a><br /></td></tr>
<tr class="separator:a69f0ab9a754721b5d19c8b112f5b8b8e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af52c5864215b4a96fbcc73104ad1f840"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classqsense_1_1_auto_ptr.xhtml#af52c5864215b4a96fbcc73104ad1f840">operator&lt;</a> (const C *ptr) const </td></tr>
<tr class="memdesc:af52c5864215b4a96fbcc73104ad1f840"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compare the owned object against the specified object for ordering.  <a href="#af52c5864215b4a96fbcc73104ad1f840">More...</a><br /></td></tr>
<tr class="separator:af52c5864215b4a96fbcc73104ad1f840"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a530b05e09a18e94261e1208b1e28e5ec"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classqsense_1_1_auto_ptr.xhtml#a530b05e09a18e94261e1208b1e28e5ec">operator&lt;</a> (C *ptr) const </td></tr>
<tr class="memdesc:a530b05e09a18e94261e1208b1e28e5ec"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compare the owned object against the specified object for ordering.  <a href="#a530b05e09a18e94261e1208b1e28e5ec">More...</a><br /></td></tr>
<tr class="separator:a530b05e09a18e94261e1208b1e28e5ec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6d4021dcb818ecb11e1f9fee9de8f6e0"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classqsense_1_1_auto_ptr.xhtml#a6d4021dcb818ecb11e1f9fee9de8f6e0">operator&lt;=</a> (const <a class="el" href="classqsense_1_1_auto_ptr.xhtml">AutoPtr</a> &amp;ptr) const </td></tr>
<tr class="separator:a6d4021dcb818ecb11e1f9fee9de8f6e0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a058e11c002234f93a454d4db3d050e62"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classqsense_1_1_auto_ptr.xhtml#a058e11c002234f93a454d4db3d050e62">operator&lt;=</a> (const C *ptr) const </td></tr>
<tr class="separator:a058e11c002234f93a454d4db3d050e62"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa182829ea3563d49451b703ae9183e9f"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classqsense_1_1_auto_ptr.xhtml#aa182829ea3563d49451b703ae9183e9f">operator&lt;=</a> (C *ptr) const </td></tr>
<tr class="separator:aa182829ea3563d49451b703ae9183e9f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6fd94795103cd7d5bf824bfba189a2be"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classqsense_1_1_auto_ptr.xhtml#a6fd94795103cd7d5bf824bfba189a2be">operator&gt;</a> (const <a class="el" href="classqsense_1_1_auto_ptr.xhtml">AutoPtr</a> &amp;ptr) const </td></tr>
<tr class="separator:a6fd94795103cd7d5bf824bfba189a2be"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac24b09a5b4e586468ed406b6aac49c98"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classqsense_1_1_auto_ptr.xhtml#ac24b09a5b4e586468ed406b6aac49c98">operator&gt;</a> (const C *ptr) const </td></tr>
<tr class="separator:ac24b09a5b4e586468ed406b6aac49c98"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a32e772c0d476fd2249c829b28d08c5a2"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classqsense_1_1_auto_ptr.xhtml#a32e772c0d476fd2249c829b28d08c5a2">operator&gt;</a> (C *ptr) const </td></tr>
<tr class="separator:a32e772c0d476fd2249c829b28d08c5a2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0fc7d18b85f75109fe3b5b5964d3f97b"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classqsense_1_1_auto_ptr.xhtml#a0fc7d18b85f75109fe3b5b5964d3f97b">operator&gt;=</a> (const <a class="el" href="classqsense_1_1_auto_ptr.xhtml">AutoPtr</a> &amp;ptr) const </td></tr>
<tr class="separator:a0fc7d18b85f75109fe3b5b5964d3f97b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad741c3155cd7b883d443234d5f6738fa"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classqsense_1_1_auto_ptr.xhtml#ad741c3155cd7b883d443234d5f6738fa">operator&gt;=</a> (const C *ptr) const </td></tr>
<tr class="separator:ad741c3155cd7b883d443234d5f6738fa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adae4ca8409eb064f8b39864570213b92"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classqsense_1_1_auto_ptr.xhtml#adae4ca8409eb064f8b39864570213b92">operator&gt;=</a> (C *ptr) const </td></tr>
<tr class="separator:adae4ca8409eb064f8b39864570213b92"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><h3>template&lt;class C&gt;<br />
class qsense::AutoPtr&lt; C &gt;</h3>

<p><a class="el" href="classqsense_1_1_auto_ptr.xhtml" title="AutoPtr is a &quot;smart&quot; pointer for classes implementing reference counting based garbage collection...">AutoPtr</a> is a "smart" pointer for classes implementing reference counting based garbage collection. </p>
<p>To be usable with the <a class="el" href="classqsense_1_1_auto_ptr.xhtml" title="AutoPtr is a &quot;smart&quot; pointer for classes implementing reference counting based garbage collection...">AutoPtr</a> template, a class must implement the following behaviour:</p>
<ul>
<li>A class must maintain a reference count.</li>
<li>The constructors of the object initialize the reference count to one.</li>
<li>The class must implement a public <a class="el" href="classqsense_1_1_auto_ptr.xhtml#a9ba2ea5428ba1fc04c96101ae4597f07" title="Invokes duplicate() on the owned pointer if valid. ">duplicate()</a> method: void <a class="el" href="classqsense_1_1_auto_ptr.xhtml#a9ba2ea5428ba1fc04c96101ae4597f07" title="Invokes duplicate() on the owned pointer if valid. ">duplicate()</a>; that increments the reference count by one.</li>
<li>The class must implement a public release() method: void release() that decrements the reference count by one, and, if the reference count reaches zero, deletes the object.</li>
</ul>
<p><a class="el" href="classqsense_1_1_auto_ptr.xhtml" title="AutoPtr is a &quot;smart&quot; pointer for classes implementing reference counting based garbage collection...">AutoPtr</a> works in the following way:</p><ul>
<li>If an <a class="el" href="classqsense_1_1_auto_ptr.xhtml" title="AutoPtr is a &quot;smart&quot; pointer for classes implementing reference counting based garbage collection...">AutoPtr</a> is assigned an ordinary pointer to an object (via the constructor or the assignment operator), it takes ownership of the object and the object's reference count remains unchanged.</li>
<li>If the <a class="el" href="classqsense_1_1_auto_ptr.xhtml" title="AutoPtr is a &quot;smart&quot; pointer for classes implementing reference counting based garbage collection...">AutoPtr</a> is assigned another <a class="el" href="classqsense_1_1_auto_ptr.xhtml" title="AutoPtr is a &quot;smart&quot; pointer for classes implementing reference counting based garbage collection...">AutoPtr</a>, the object's reference count is incremented by one by calling <a class="el" href="classqsense_1_1_auto_ptr.xhtml#a9ba2ea5428ba1fc04c96101ae4597f07" title="Invokes duplicate() on the owned pointer if valid. ">duplicate()</a> on its object.</li>
<li>The destructor of <a class="el" href="classqsense_1_1_auto_ptr.xhtml" title="AutoPtr is a &quot;smart&quot; pointer for classes implementing reference counting based garbage collection...">AutoPtr</a> calls release() on its object.</li>
<li><a class="el" href="classqsense_1_1_auto_ptr.xhtml" title="AutoPtr is a &quot;smart&quot; pointer for classes implementing reference counting based garbage collection...">AutoPtr</a> supports dereferencing with both the -&gt; and the * operator. An attempt to dereference a null <a class="el" href="classqsense_1_1_auto_ptr.xhtml" title="AutoPtr is a &quot;smart&quot; pointer for classes implementing reference counting based garbage collection...">AutoPtr</a> results in a error that will cause application termination. <a class="el" href="classqsense_1_1_auto_ptr.xhtml" title="AutoPtr is a &quot;smart&quot; pointer for classes implementing reference counting based garbage collection...">AutoPtr</a> also implements all relational operators. Note that <a class="el" href="classqsense_1_1_auto_ptr.xhtml" title="AutoPtr is a &quot;smart&quot; pointer for classes implementing reference counting based garbage collection...">AutoPtr</a> allows casting of its encapsulated data types. </li>
</ul>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a62a648149ae56d99165b69220f6ba670"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class C &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classqsense_1_1_auto_ptr.xhtml">qsense::AutoPtr</a>&lt; C &gt;::<a class="el" href="classqsense_1_1_auto_ptr.xhtml">AutoPtr</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Default constructor. Creates a new instance that points to nothing. </p>

</div>
</div>
<a class="anchor" id="aecac48b004d4d4b6d0314111ff73c926"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class C &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classqsense_1_1_auto_ptr.xhtml">qsense::AutoPtr</a>&lt; C &gt;::<a class="el" href="classqsense_1_1_auto_ptr.xhtml">AutoPtr</a> </td>
          <td>(</td>
          <td class="paramtype">C *&#160;</td>
          <td class="paramname"><em>ptr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Create an auto pointer that takes ownership of the specified pointer. </p>

</div>
</div>
<a class="anchor" id="ad1c80c422ad7b1ce9d3baeee86dc873a"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class C &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classqsense_1_1_auto_ptr.xhtml">qsense::AutoPtr</a>&lt; C &gt;::<a class="el" href="classqsense_1_1_auto_ptr.xhtml">AutoPtr</a> </td>
          <td>(</td>
          <td class="paramtype">C *&#160;</td>
          <td class="paramname"><em>ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>shared</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p><a class="el" href="classqsense_1_1_auto_ptr.xhtml" title="AutoPtr is a &quot;smart&quot; pointer for classes implementing reference counting based garbage collection...">AutoPtr</a> Create an auto pointer that takes ownership of the specified pointer. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ptr</td><td>The pointer to take ownership of </td></tr>
    <tr><td class="paramname">shared</td><td>If <code>true</code> then increment the reference count for the specified pointer. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a92863a13324b1154a95e3e69ebfc2aac"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class C &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classqsense_1_1_auto_ptr.xhtml">qsense::AutoPtr</a>&lt; C &gt;::<a class="el" href="classqsense_1_1_auto_ptr.xhtml">AutoPtr</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classqsense_1_1_auto_ptr.xhtml">AutoPtr</a>&lt; C &gt; &amp;&#160;</td>
          <td class="paramname"><em>ptr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Copy constructor. Increases the reference count for the owned object. </p>

</div>
</div>
<a class="anchor" id="a1c7f4dfe2c927919b6789baf7b766240"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class C &gt; </div>
<div class="memtemplate">
template&lt;class Other &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classqsense_1_1_auto_ptr.xhtml">qsense::AutoPtr</a>&lt; C &gt;::<a class="el" href="classqsense_1_1_auto_ptr.xhtml">AutoPtr</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classqsense_1_1_auto_ptr.xhtml">AutoPtr</a>&lt; Other &gt; &amp;&#160;</td>
          <td class="paramname"><em>ptr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Copy constructor for taking ownership of another type of object. </p>

</div>
</div>
<a class="anchor" id="aa16d9313727fe18952ce7e7715fbb819"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class C &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classqsense_1_1_auto_ptr.xhtml">qsense::AutoPtr</a>&lt; C &gt;::~<a class="el" href="classqsense_1_1_auto_ptr.xhtml">AutoPtr</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Destructor. Invokes <code>release</code> on the owned object. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="ac86871e59ce348e77bfb43933cbf5d31"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class C &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classqsense_1_1_auto_ptr.xhtml">AutoPtr</a>&amp; <a class="el" href="classqsense_1_1_auto_ptr.xhtml">qsense::AutoPtr</a>&lt; C &gt;::assign </td>
          <td>(</td>
          <td class="paramtype">C *&#160;</td>
          <td class="paramname"><em>ptr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Use to (re)set the owned object. If current owned object is not <code>null</code>, invokes <code>release</code> on the object. </p>

</div>
</div>
<a class="anchor" id="a2c466fc20f28d467c559c30d148f3c1e"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class C &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classqsense_1_1_auto_ptr.xhtml">AutoPtr</a>&amp; <a class="el" href="classqsense_1_1_auto_ptr.xhtml">qsense::AutoPtr</a>&lt; C &gt;::assign </td>
          <td>(</td>
          <td class="paramtype">C *&#160;</td>
          <td class="paramname"><em>ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>shared</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reset the owned object. If current owned object is not <code>null</code>, invokes <code>release</code> on the object. Will invoke <code>duplicate</code> on the new instance if <code>shared</code> is specified. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ptr</td><td>The new object to take ownership of. </td></tr>
    <tr><td class="paramname">shared</td><td>If <code>true</code>, <code><a class="el" href="classqsense_1_1_auto_ptr.xhtml#a9ba2ea5428ba1fc04c96101ae4597f07" title="Invokes duplicate() on the owned pointer if valid. ">duplicate()</a></code> the owned object. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Reference to this instance for convenience. </dd></dl>

</div>
</div>
<a class="anchor" id="af254ae757efe5672e1ea1c0f4f7d15c2"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class C &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classqsense_1_1_auto_ptr.xhtml">AutoPtr</a>&amp; <a class="el" href="classqsense_1_1_auto_ptr.xhtml">qsense::AutoPtr</a>&lt; C &gt;::assign </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classqsense_1_1_auto_ptr.xhtml">AutoPtr</a>&lt; C &gt; &amp;&#160;</td>
          <td class="paramname"><em>ptr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Share the pointer owned by the specified auto pointer instance. </p>

</div>
</div>
<a class="anchor" id="af79bab167944713a7b00478f96d92034"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class C &gt; </div>
<div class="memtemplate">
template&lt;class Other &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classqsense_1_1_auto_ptr.xhtml">AutoPtr</a>&amp; <a class="el" href="classqsense_1_1_auto_ptr.xhtml">qsense::AutoPtr</a>&lt; C &gt;::assign </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classqsense_1_1_auto_ptr.xhtml">AutoPtr</a>&lt; Other &gt; &amp;&#160;</td>
          <td class="paramname"><em>ptr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Share the pointer owned by the specified auto pointer of different type. </p>

</div>
</div>
<a class="anchor" id="a92aa90a7ecfea8212f16f1aa9aba8dc7"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class C &gt; </div>
<div class="memtemplate">
template&lt;class Other &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classqsense_1_1_auto_ptr.xhtml">AutoPtr</a>&lt;Other&gt; <a class="el" href="classqsense_1_1_auto_ptr.xhtml">qsense::AutoPtr</a>&lt; C &gt;::cast </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Casts the <a class="el" href="classqsense_1_1_auto_ptr.xhtml" title="AutoPtr is a &quot;smart&quot; pointer for classes implementing reference counting based garbage collection...">AutoPtr</a> via a dynamic cast to the given type. Returns an <a class="el" href="classqsense_1_1_auto_ptr.xhtml" title="AutoPtr is a &quot;smart&quot; pointer for classes implementing reference counting based garbage collection...">AutoPtr</a> containing NULL if the cast fails. Example: (assume class Sub: public Super) AutoPtr&lt;Super&gt; super(new Sub()); AutoPtr&lt;Sub&gt; sub = super.cast&lt;Sub&gt;(); poco_assert (sub.get());. </p>

</div>
</div>
<a class="anchor" id="a9ba2ea5428ba1fc04c96101ae4597f07"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class C &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">C* <a class="el" href="classqsense_1_1_auto_ptr.xhtml">qsense::AutoPtr</a>&lt; C &gt;::duplicate </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Invokes <code><a class="el" href="classqsense_1_1_auto_ptr.xhtml#a9ba2ea5428ba1fc04c96101ae4597f07" title="Invokes duplicate() on the owned pointer if valid. ">duplicate()</a></code> on the owned pointer if valid. </p>

</div>
</div>
<a class="anchor" id="acf8aa7f7fab1f946b9815d7d8e2f3f6d"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class C &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">C* <a class="el" href="classqsense_1_1_auto_ptr.xhtml">qsense::AutoPtr</a>&lt; C &gt;::get </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return the owned pointer. Callers must not <code>delete</code>. </p>

</div>
</div>
<a class="anchor" id="a8ed3fa1c5a9eb5487d570ddf63267b2e"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class C &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const C* <a class="el" href="classqsense_1_1_auto_ptr.xhtml">qsense::AutoPtr</a>&lt; C &gt;::get </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return the owned pointer. Callers must not <code>delete</code>. </p>

</div>
</div>
<a class="anchor" id="a469b4702939d37f6851ccb73deb197f6"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class C &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classqsense_1_1_auto_ptr.xhtml">qsense::AutoPtr</a>&lt; C &gt;::isNull </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Negative check of make sure the owned pointer is not valid. </p>

</div>
</div>
<a class="anchor" id="aaecea6dd3b2c3e754865c429e0243bd3"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class C &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classqsense_1_1_auto_ptr.xhtml">qsense::AutoPtr</a>&lt; C &gt;::operator C * </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function operator. Return the owned pointer. </p>

</div>
</div>
<a class="anchor" id="a07ed87163c03adb70b842a94ec39610c"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class C &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classqsense_1_1_auto_ptr.xhtml">qsense::AutoPtr</a>&lt; C &gt;::operator const C * </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Function operator. Return the owned pointer. </p>

</div>
</div>
<a class="anchor" id="aa020727f8b9610af4191e05b0535b7e3"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class C &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classqsense_1_1_auto_ptr.xhtml">qsense::AutoPtr</a>&lt; C &gt;::operator! </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Negative check of make sure the owned pointer is not valid. </p>

</div>
</div>
<a class="anchor" id="a19da37b40aeb001b5aea2bd69b0b46e0"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class C &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classqsense_1_1_auto_ptr.xhtml">qsense::AutoPtr</a>&lt; C &gt;::<a class="el" href="classqsense_1_1_auto_ptr.xhtml#aa020727f8b9610af4191e05b0535b7e3">operator!</a>= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classqsense_1_1_auto_ptr.xhtml">AutoPtr</a>&lt; C &gt; &amp;&#160;</td>
          <td class="paramname"><em>ptr</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Compare the owned objects for inequality. </p>

</div>
</div>
<a class="anchor" id="a0df38164d7925094c89be45562eb9ac7"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class C &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classqsense_1_1_auto_ptr.xhtml">qsense::AutoPtr</a>&lt; C &gt;::<a class="el" href="classqsense_1_1_auto_ptr.xhtml#aa020727f8b9610af4191e05b0535b7e3">operator!</a>= </td>
          <td>(</td>
          <td class="paramtype">const C *&#160;</td>
          <td class="paramname"><em>ptr</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Compare the owned object against the specified object for inequality. </p>

</div>
</div>
<a class="anchor" id="a7931321d84723ab6a180c1fd7e7bbcd3"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class C &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classqsense_1_1_auto_ptr.xhtml">qsense::AutoPtr</a>&lt; C &gt;::<a class="el" href="classqsense_1_1_auto_ptr.xhtml#aa020727f8b9610af4191e05b0535b7e3">operator!</a>= </td>
          <td>(</td>
          <td class="paramtype">C *&#160;</td>
          <td class="paramname"><em>ptr</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Compare the owned object against the specified object for inequality. </p>

</div>
</div>
<a class="anchor" id="a6365e7ebb94d4d9f54be0aec65f44d86"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class C &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">C&amp; <a class="el" href="classqsense_1_1_auto_ptr.xhtml">qsense::AutoPtr</a>&lt; C &gt;::operator* </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Dereference operator for the owned object. Will lead to program termination if the owned object is not valid. </p>

</div>
</div>
<a class="anchor" id="a7a9da506d793ffad0f1f8e7f3836e527"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class C &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const C&amp; <a class="el" href="classqsense_1_1_auto_ptr.xhtml">qsense::AutoPtr</a>&lt; C &gt;::operator* </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Dereference operator for the owned object. Will lead to program termination if the owned object is not valid. </p>

</div>
</div>
<a class="anchor" id="a1b4a4a6b09ff47f390c8e86105d4e353"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class C &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">C* <a class="el" href="classqsense_1_1_auto_ptr.xhtml">qsense::AutoPtr</a>&lt; C &gt;::operator-&gt; </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Pointer acess operator for the owned object. Returns <code>NULL</code> if invalid. </p>

</div>
</div>
<a class="anchor" id="ac0653e3314b373570a5ccf9251e1d902"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class C &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const C* <a class="el" href="classqsense_1_1_auto_ptr.xhtml">qsense::AutoPtr</a>&lt; C &gt;::operator-&gt; </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Pointer acess operator for the owned object. Returns <code>NULL</code> if invalid. </p>

</div>
</div>
<a class="anchor" id="a69f0ab9a754721b5d19c8b112f5b8b8e"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class C &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classqsense_1_1_auto_ptr.xhtml">qsense::AutoPtr</a>&lt; C &gt;::operator&lt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classqsense_1_1_auto_ptr.xhtml">AutoPtr</a>&lt; C &gt; &amp;&#160;</td>
          <td class="paramname"><em>ptr</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Compare the owned objects for ordering. </p>

</div>
</div>
<a class="anchor" id="af52c5864215b4a96fbcc73104ad1f840"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class C &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classqsense_1_1_auto_ptr.xhtml">qsense::AutoPtr</a>&lt; C &gt;::operator&lt; </td>
          <td>(</td>
          <td class="paramtype">const C *&#160;</td>
          <td class="paramname"><em>ptr</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Compare the owned object against the specified object for ordering. </p>

</div>
</div>
<a class="anchor" id="a530b05e09a18e94261e1208b1e28e5ec"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class C &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classqsense_1_1_auto_ptr.xhtml">qsense::AutoPtr</a>&lt; C &gt;::operator&lt; </td>
          <td>(</td>
          <td class="paramtype">C *&#160;</td>
          <td class="paramname"><em>ptr</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Compare the owned object against the specified object for ordering. </p>

</div>
</div>
<a class="anchor" id="a6d4021dcb818ecb11e1f9fee9de8f6e0"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class C &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classqsense_1_1_auto_ptr.xhtml">qsense::AutoPtr</a>&lt; C &gt;::operator&lt;= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classqsense_1_1_auto_ptr.xhtml">AutoPtr</a>&lt; C &gt; &amp;&#160;</td>
          <td class="paramname"><em>ptr</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a058e11c002234f93a454d4db3d050e62"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class C &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classqsense_1_1_auto_ptr.xhtml">qsense::AutoPtr</a>&lt; C &gt;::operator&lt;= </td>
          <td>(</td>
          <td class="paramtype">const C *&#160;</td>
          <td class="paramname"><em>ptr</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="aa182829ea3563d49451b703ae9183e9f"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class C &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classqsense_1_1_auto_ptr.xhtml">qsense::AutoPtr</a>&lt; C &gt;::operator&lt;= </td>
          <td>(</td>
          <td class="paramtype">C *&#160;</td>
          <td class="paramname"><em>ptr</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a6ba8079f3e9d5e7dc91e6541fc864e2c"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class C &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classqsense_1_1_auto_ptr.xhtml">AutoPtr</a>&amp; <a class="el" href="classqsense_1_1_auto_ptr.xhtml">qsense::AutoPtr</a>&lt; C &gt;::operator= </td>
          <td>(</td>
          <td class="paramtype">C *&#160;</td>
          <td class="paramname"><em>ptr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Copy assignment operator. Delegates to <a class="el" href="classqsense_1_1_auto_ptr.xhtml#ac86871e59ce348e77bfb43933cbf5d31">assign</a>. </p>

</div>
</div>
<a class="anchor" id="afd3822ecfb0ce43a152c783f193c2907"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class C &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classqsense_1_1_auto_ptr.xhtml">AutoPtr</a>&amp; <a class="el" href="classqsense_1_1_auto_ptr.xhtml">qsense::AutoPtr</a>&lt; C &gt;::operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classqsense_1_1_auto_ptr.xhtml">AutoPtr</a>&lt; C &gt; &amp;&#160;</td>
          <td class="paramname"><em>ptr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Copy assignment operator. Delegates to <a class="el" href="classqsense_1_1_auto_ptr.xhtml#ac86871e59ce348e77bfb43933cbf5d31">assign</a>. </p>

</div>
</div>
<a class="anchor" id="a8ae3da83de4d1b40472ea38a91cdf74d"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class C &gt; </div>
<div class="memtemplate">
template&lt;class Other &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classqsense_1_1_auto_ptr.xhtml">AutoPtr</a>&amp; <a class="el" href="classqsense_1_1_auto_ptr.xhtml">qsense::AutoPtr</a>&lt; C &gt;::operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classqsense_1_1_auto_ptr.xhtml">AutoPtr</a>&lt; Other &gt; &amp;&#160;</td>
          <td class="paramname"><em>ptr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Copy assignment operator. Delegates to <a class="el" href="classqsense_1_1_auto_ptr.xhtml#ac86871e59ce348e77bfb43933cbf5d31">assign</a>. </p>

</div>
</div>
<a class="anchor" id="a1315b4fbaaa9b111f3e96fd7f3a95d2d"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class C &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classqsense_1_1_auto_ptr.xhtml">qsense::AutoPtr</a>&lt; C &gt;::operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classqsense_1_1_auto_ptr.xhtml">AutoPtr</a>&lt; C &gt; &amp;&#160;</td>
          <td class="paramname"><em>ptr</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Compare the owned objects for equality. </p>

</div>
</div>
<a class="anchor" id="a71842ceaad911fc2f38d4200bb52f4b4"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class C &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classqsense_1_1_auto_ptr.xhtml">qsense::AutoPtr</a>&lt; C &gt;::operator== </td>
          <td>(</td>
          <td class="paramtype">const C *&#160;</td>
          <td class="paramname"><em>ptr</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Compare the owned object against the specified object for equality. </p>

</div>
</div>
<a class="anchor" id="a22ae8819d5a8db7b06d0f62e423a788d"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class C &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classqsense_1_1_auto_ptr.xhtml">qsense::AutoPtr</a>&lt; C &gt;::operator== </td>
          <td>(</td>
          <td class="paramtype">C *&#160;</td>
          <td class="paramname"><em>ptr</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Compare the owned object against the specified object for equality. </p>

</div>
</div>
<a class="anchor" id="a6fd94795103cd7d5bf824bfba189a2be"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class C &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classqsense_1_1_auto_ptr.xhtml">qsense::AutoPtr</a>&lt; C &gt;::operator&gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classqsense_1_1_auto_ptr.xhtml">AutoPtr</a>&lt; C &gt; &amp;&#160;</td>
          <td class="paramname"><em>ptr</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="ac24b09a5b4e586468ed406b6aac49c98"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class C &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classqsense_1_1_auto_ptr.xhtml">qsense::AutoPtr</a>&lt; C &gt;::operator&gt; </td>
          <td>(</td>
          <td class="paramtype">const C *&#160;</td>
          <td class="paramname"><em>ptr</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a32e772c0d476fd2249c829b28d08c5a2"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class C &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classqsense_1_1_auto_ptr.xhtml">qsense::AutoPtr</a>&lt; C &gt;::operator&gt; </td>
          <td>(</td>
          <td class="paramtype">C *&#160;</td>
          <td class="paramname"><em>ptr</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a0fc7d18b85f75109fe3b5b5964d3f97b"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class C &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classqsense_1_1_auto_ptr.xhtml">qsense::AutoPtr</a>&lt; C &gt;::operator&gt;= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classqsense_1_1_auto_ptr.xhtml">AutoPtr</a>&lt; C &gt; &amp;&#160;</td>
          <td class="paramname"><em>ptr</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="ad741c3155cd7b883d443234d5f6738fa"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class C &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classqsense_1_1_auto_ptr.xhtml">qsense::AutoPtr</a>&lt; C &gt;::operator&gt;= </td>
          <td>(</td>
          <td class="paramtype">const C *&#160;</td>
          <td class="paramname"><em>ptr</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="adae4ca8409eb064f8b39864570213b92"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class C &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classqsense_1_1_auto_ptr.xhtml">qsense::AutoPtr</a>&lt; C &gt;::operator&gt;= </td>
          <td>(</td>
          <td class="paramtype">C *&#160;</td>
          <td class="paramname"><em>ptr</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a3c39d34dfefc3e70cc03ef8331b0bde6"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class C &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classqsense_1_1_auto_ptr.xhtml">qsense::AutoPtr</a>&lt; C &gt;::swap </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classqsense_1_1_auto_ptr.xhtml">AutoPtr</a>&lt; C &gt; &amp;&#160;</td>
          <td class="paramname"><em>ptr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Swap the pointers of this instance with the specified instance. </p>

</div>
</div>
<a class="anchor" id="afd0882c46ad8d89747a0eb64f35310ef"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class C &gt; </div>
<div class="memtemplate">
template&lt;class Other &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classqsense_1_1_auto_ptr.xhtml">AutoPtr</a>&lt;Other&gt; <a class="el" href="classqsense_1_1_auto_ptr.xhtml">qsense::AutoPtr</a>&lt; C &gt;::unsafeCast </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Casts the <a class="el" href="classqsense_1_1_auto_ptr.xhtml" title="AutoPtr is a &quot;smart&quot; pointer for classes implementing reference counting based garbage collection...">AutoPtr</a> via a static cast to the given type. Example: (assume class Sub: public Super) AutoPtr&lt;Super&gt; super(new Sub()); AutoPtr&lt;Sub&gt; sub = super.unsafeCast&lt;Sub&gt;(); poco_assert (sub.get());. </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>/Users/rakesh/svn/customer/qsense/desktop/src/api/<a class="el" href="_auto_ptr_8h.xhtml">AutoPtr.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespaceqsense.xhtml">qsense</a></li><li class="navelem"><a class="el" href="classqsense_1_1_auto_ptr.xhtml">AutoPtr</a></li>
    <li class="footer">Generated on Thu Dec 3 2015 10:29:52 for QSense Sidecar Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.9.1 </li>
  </ul>
</div>
</body>
</html>
