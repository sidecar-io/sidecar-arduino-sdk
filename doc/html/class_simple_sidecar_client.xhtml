<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.9.1"/>
<title>QSense Sidecar Library: SimpleSidecarClient Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">QSense Sidecar Library
   &#160;<span id="projectnumber">1.0.0</span>
   </div>
   <div id="projectbrief">Developed for QSense</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.9.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.xhtml"><span>Class&#160;List</span></a></li>
      <li><a href="classes.xhtml"><span>Class&#160;Index</span></a></li>
      <li><a href="inherits.xhtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.xhtml"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('class_simple_sidecar_client.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="class_simple_sidecar_client-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">SimpleSidecarClient Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>A simple client implementation that hides the low-level API.  
 <a href="class_simple_sidecar_client.xhtml#details">More...</a></p>

<p><code>#include &lt;SimpleSidecarClient.h&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_simple_sidecar_client_1_1_user_response.xhtml">UserResponse</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A simple data structure that represents the response from Sidecar Provisioning API.  <a href="struct_simple_sidecar_client_1_1_user_response.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:ae727e1760c4ff910d3c1ea307a5f33ca"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_simple_sidecar_client.xhtml#ae727e1760c4ff910d3c1ea307a5f33ca">NetworkType</a> { <a class="el" href="class_simple_sidecar_client.xhtml#ae727e1760c4ff910d3c1ea307a5f33caa6e964ab628bd9bb8c2a178c3e79803b0">Ethernet</a> = 0, 
<a class="el" href="class_simple_sidecar_client.xhtml#ae727e1760c4ff910d3c1ea307a5f33caa73c1ae250254570a57782458ce9d777c">WiFi</a> = 1
 }</td></tr>
<tr class="memdesc:ae727e1760c4ff910d3c1ea307a5f33ca"><td class="mdescLeft">&#160;</td><td class="mdescRight">Enumeration of network connection types for device.  <a href="class_simple_sidecar_client.xhtml#ae727e1760c4ff910d3c1ea307a5f33ca">More...</a><br /></td></tr>
<tr class="separator:ae727e1760c4ff910d3c1ea307a5f33ca"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a4165ce06371cb8ab7a6465b081a0b389"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_simple_sidecar_client.xhtml#a4165ce06371cb8ab7a6465b081a0b389">SimpleSidecarClient</a> ()</td></tr>
<tr class="separator:a4165ce06371cb8ab7a6465b081a0b389"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a16f32a877a5c97f429ff0b548465a76c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_simple_sidecar_client_1_1_user_response.xhtml">UserResponse</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_simple_sidecar_client.xhtml#a16f32a877a5c97f429ff0b548465a76c">authenticate</a> (const String &amp;username, const String &amp;password)</td></tr>
<tr class="memdesc:a16f32a877a5c97f429ff0b548465a76c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Authenticate the user against Sidecar. Return the existing user key/secret pair to use with the events API.  <a href="#a16f32a877a5c97f429ff0b548465a76c">More...</a><br /></td></tr>
<tr class="separator:a16f32a877a5c97f429ff0b548465a76c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a001a437cf90b9da3c132f409231dfe43"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_simple_sidecar_client_1_1_user_response.xhtml">UserResponse</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_simple_sidecar_client.xhtml#a001a437cf90b9da3c132f409231dfe43">createUser</a> (const String &amp;username, const String &amp;password)</td></tr>
<tr class="memdesc:a001a437cf90b9da3c132f409231dfe43"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a new user account with Sidecar. Use this on first run of application if the <a class="el" href="class_simple_sidecar_client.xhtml#a16f32a877a5c97f429ff0b548465a76c">authenticate</a> method returned an invalid (not 200) <code>responseCode</code>.  <a href="#a001a437cf90b9da3c132f409231dfe43">More...</a><br /></td></tr>
<tr class="separator:a001a437cf90b9da3c132f409231dfe43"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3f1947c2c3363cf237a446bc3edeb41b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_simple_sidecar_client_1_1_user_response.xhtml">UserResponse</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_simple_sidecar_client.xhtml#a3f1947c2c3363cf237a446bc3edeb41b">createOrRetrieveAccessKeys</a> (const String &amp;username, const String &amp;password)</td></tr>
<tr class="memdesc:a3f1947c2c3363cf237a446bc3edeb41b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create or retrieve application access keys for the specified user.  <a href="#a3f1947c2c3363cf237a446bc3edeb41b">More...</a><br /></td></tr>
<tr class="separator:a3f1947c2c3363cf237a446bc3edeb41b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3777df171e3474854445fde0ff299799"><td class="memItemLeft" align="right" valign="top">int16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_simple_sidecar_client.xhtml#a3777df171e3474854445fde0ff299799">deleteUser</a> (const String &amp;username, const String &amp;password)</td></tr>
<tr class="memdesc:a3777df171e3474854445fde0ff299799"><td class="mdescLeft">&#160;</td><td class="mdescRight">deleteUser Deprovision a user from the system. Removes the user account, access key/secret and devices associated with the user.  <a href="#a3777df171e3474854445fde0ff299799">More...</a><br /></td></tr>
<tr class="separator:a3777df171e3474854445fde0ff299799"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab04bc09dbf1c36259edcb28f5a3d7b13"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_simple_sidecar_client.xhtml#ab04bc09dbf1c36259edcb28f5a3d7b13">addReading</a> (const String &amp;key, const float value)</td></tr>
<tr class="memdesc:ab04bc09dbf1c36259edcb28f5a3d7b13"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add the specified reading key-value pair to an event. Add as many readings as desired before publishing the event to Sidecar (<a class="el" href="class_simple_sidecar_client.xhtml#ac09167a37d178cfebc868bbc591101f6">publish</a>). On publish, the event is re-initialised for publishing subsequent readings.  <a href="#ab04bc09dbf1c36259edcb28f5a3d7b13">More...</a><br /></td></tr>
<tr class="separator:ab04bc09dbf1c36259edcb28f5a3d7b13"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a62350e839bccc7d23c986d38d11ed874"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_simple_sidecar_client.xhtml#a62350e839bccc7d23c986d38d11ed874">addTag</a> (const String &amp;value)</td></tr>
<tr class="memdesc:a62350e839bccc7d23c986d38d11ed874"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add optional tag values to help analyse the event after publishing to Sidecar.  <a href="#a62350e839bccc7d23c986d38d11ed874">More...</a><br /></td></tr>
<tr class="separator:a62350e839bccc7d23c986d38d11ed874"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac09167a37d178cfebc868bbc591101f6"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_simple_sidecar_client.xhtml#ac09167a37d178cfebc868bbc591101f6">publish</a> ()</td></tr>
<tr class="memdesc:ac09167a37d178cfebc868bbc591101f6"><td class="mdescLeft">&#160;</td><td class="mdescRight">publish Publish the built up event to the Sidecar Event API. Invoke <a class="el" href="class_simple_sidecar_client.xhtml#ab04bc09dbf1c36259edcb28f5a3d7b13">addReading</a> with the individual readings that are part of the current event, and <a class="el" href="class_simple_sidecar_client.xhtml#a62350e839bccc7d23c986d38d11ed874">addTag</a> as needed to build up a complete event before publishing to Sidecar.  <a href="#ac09167a37d178cfebc868bbc591101f6">More...</a><br /></td></tr>
<tr class="separator:ac09167a37d178cfebc868bbc591101f6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a873fcff651334ffa567ba424a86b5fb8"><td class="memItemLeft" align="right" valign="top">const String&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_simple_sidecar_client.xhtml#a873fcff651334ffa567ba424a86b5fb8">currentTime</a> ()</td></tr>
<tr class="memdesc:a873fcff651334ffa567ba424a86b5fb8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the current date/time in ISO 8601 format.  <a href="#a873fcff651334ffa567ba424a86b5fb8">More...</a><br /></td></tr>
<tr class="separator:a873fcff651334ffa567ba424a86b5fb8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac8eba1426e448c02b52f49c95db16efb"><td class="memItemLeft" align="right" valign="top">const String&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_simple_sidecar_client.xhtml#ac8eba1426e448c02b52f49c95db16efb">date</a> ()</td></tr>
<tr class="memdesc:ac8eba1426e448c02b52f49c95db16efb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the current date in ISO 8601 format.  <a href="#ac8eba1426e448c02b52f49c95db16efb">More...</a><br /></td></tr>
<tr class="separator:ac8eba1426e448c02b52f49c95db16efb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a059cd1d4077bb027321bf78c777ebc25"><td class="memItemLeft" align="right" valign="top">int64_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_simple_sidecar_client.xhtml#a059cd1d4077bb027321bf78c777ebc25">currentTimeMillis</a> ()</td></tr>
<tr class="memdesc:a059cd1d4077bb027321bf78c777ebc25"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the milli seconds since UNIX epoch.  <a href="#a059cd1d4077bb027321bf78c777ebc25">More...</a><br /></td></tr>
<tr class="separator:a059cd1d4077bb027321bf78c777ebc25"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a4aa20b32411af5bf15f1b3e1538baf94"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_simple_sidecar_client.xhtml#a4aa20b32411af5bf15f1b3e1538baf94">initNetworkType</a> (<a class="el" href="class_simple_sidecar_client.xhtml#ae727e1760c4ff910d3c1ea307a5f33ca">NetworkType</a> type)</td></tr>
<tr class="memdesc:a4aa20b32411af5bf15f1b3e1538baf94"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initialise the API to use the specified type.  <a href="#a4aa20b32411af5bf15f1b3e1538baf94">More...</a><br /></td></tr>
<tr class="separator:a4aa20b32411af5bf15f1b3e1538baf94"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a011da9dd9e7360bf8c28ef2d0e0573bc"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_simple_sidecar_client.xhtml#a011da9dd9e7360bf8c28ef2d0e0573bc">initUUID</a> (byte mac[6])</td></tr>
<tr class="separator:a011da9dd9e7360bf8c28ef2d0e0573bc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab8d2d475e584604dcf41492cd302a631"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_simple_sidecar_client.xhtml#ab8d2d475e584604dcf41492cd302a631">initUUID</a> ()</td></tr>
<tr class="memdesc:ab8d2d475e584604dcf41492cd302a631"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initialise UUID engine using a random seed.  <a href="#ab8d2d475e584604dcf41492cd302a631">More...</a><br /></td></tr>
<tr class="separator:ab8d2d475e584604dcf41492cd302a631"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8b73149ff9c868aa4ddd516e1bc32869"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_simple_sidecar_client.xhtml#a8b73149ff9c868aa4ddd516e1bc32869">initAPIKey</a> (const String &amp;apiKey, const String &amp;apiSecret)</td></tr>
<tr class="separator:a8b73149ff9c868aa4ddd516e1bc32869"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6460635f3bda30c0e2607840778ce911"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_simple_sidecar_client.xhtml#a6460635f3bda30c0e2607840778ce911">initUserKey</a> (const String &amp;userKey, const String &amp;userSecret)</td></tr>
<tr class="separator:a6460635f3bda30c0e2607840778ce911"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a57814a206ef34093f779841f0c250587"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_simple_sidecar_client.xhtml#a57814a206ef34093f779841f0c250587">initEventAPI</a> (const String &amp;streamId, const String &amp;deviceUUID, const float latitude, const float longitude)</td></tr>
<tr class="memdesc:a57814a206ef34093f779841f0c250587"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initialise the Sidecar Event API.  <a href="#a57814a206ef34093f779841f0c250587">More...</a><br /></td></tr>
<tr class="separator:a57814a206ef34093f779841f0c250587"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>A simple client implementation that hides the low-level API. </p>
<p>The low-level API is a cross-platform standard C++ API that has been tested on Mac OS X and Windows in addition to Arduino Mega. The simple client is specific to Arduino and is intended to provide a single class that Arduino applications may use to provision devices and publish event data.</p>
<p>The methods in this class are declared in the same order that a typical calling application will need to make to interact with Sidecar. </p>
</div><h2 class="groupheader">Member Enumeration Documentation</h2>
<a class="anchor" id="ae727e1760c4ff910d3c1ea307a5f33ca"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="class_simple_sidecar_client.xhtml#ae727e1760c4ff910d3c1ea307a5f33ca">SimpleSidecarClient::NetworkType</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Enumeration of network connection types for device. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a class="anchor" id="ae727e1760c4ff910d3c1ea307a5f33caa6e964ab628bd9bb8c2a178c3e79803b0"></a>Ethernet&#160;</td><td class="fielddoc">
</td></tr>
<tr><td class="fieldname"><a class="anchor" id="ae727e1760c4ff910d3c1ea307a5f33caa73c1ae250254570a57782458ce9d777c"></a>WiFi&#160;</td><td class="fielddoc">
</td></tr>
</table>

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a4165ce06371cb8ab7a6465b081a0b389"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">SimpleSidecarClient::SimpleSidecarClient </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="ab04bc09dbf1c36259edcb28f5a3d7b13"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SimpleSidecarClient::addReading </td>
          <td>(</td>
          <td class="paramtype">const String &amp;&#160;</td>
          <td class="paramname"><em>key</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Add the specified reading key-value pair to an event. Add as many readings as desired before publishing the event to Sidecar (<a class="el" href="class_simple_sidecar_client.xhtml#ac09167a37d178cfebc868bbc591101f6">publish</a>). On publish, the event is re-initialised for publishing subsequent readings. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">key</td><td>A user defined key for the reading </td></tr>
    <tr><td class="paramname">value</td><td>The value for the reading. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a62350e839bccc7d23c986d38d11ed874"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SimpleSidecarClient::addTag </td>
          <td>(</td>
          <td class="paramtype">const String &amp;&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Add optional tag values to help analyse the event after publishing to Sidecar. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>A tag value. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a16f32a877a5c97f429ff0b548465a76c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_simple_sidecar_client_1_1_user_response.xhtml">UserResponse</a> SimpleSidecarClient::authenticate </td>
          <td>(</td>
          <td class="paramtype">const String &amp;&#160;</td>
          <td class="paramname"><em>username</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const String &amp;&#160;</td>
          <td class="paramname"><em>password</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Authenticate the user against Sidecar. Return the existing user key/secret pair to use with the events API. </p>
<p>This is generally the first call to use on first run of the application. Use <code>authenticate</code> before <a class="el" href="class_simple_sidecar_client.xhtml#a001a437cf90b9da3c132f409231dfe43">createUser</a> to ensure that the account name (email id) and password are not already in use.</p>
<p>If the response contains a valid (non-empty) keyId and secret, calling applications may chose to save it to flash storage using <code>PROGMEM</code>. Once stored the provisioning process is complete, and the application may interact directly with the Event API methods. On each run of the application invoke <a class="el" href="class_simple_sidecar_client.xhtml#a6460635f3bda30c0e2607840778ce911">initUserKey</a> with the stored user key and secret.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">username</td><td>The username of the user to authenticate as </td></tr>
    <tr><td class="paramname">password</td><td>The password to use to authenticate </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The response which on success will contain the key/secret pair. In case of failure the <code>responseCode</code> value will be other than <code>200</code>. </dd></dl>

</div>
</div>
<a class="anchor" id="a3f1947c2c3363cf237a446bc3edeb41b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_simple_sidecar_client_1_1_user_response.xhtml">UserResponse</a> SimpleSidecarClient::createOrRetrieveAccessKeys </td>
          <td>(</td>
          <td class="paramtype">const String &amp;&#160;</td>
          <td class="paramname"><em>username</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const String &amp;&#160;</td>
          <td class="paramname"><em>password</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create or retrieve application access keys for the specified user. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">username</td><td>The username preferred by user (email format) </td></tr>
    <tr><td class="paramname">password</td><td>The password to associate with user account (8-20 char length) </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Return a <a class="el" href="struct_simple_sidecar_client_1_1_user_response.xhtml" title="A simple data structure that represents the response from Sidecar Provisioning API. ">UserResponse</a> struct with key/secret pair populated on success. The <code>responseCode</code> value will be <code>200</code> on success. </dd></dl>

</div>
</div>
<a class="anchor" id="a001a437cf90b9da3c132f409231dfe43"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_simple_sidecar_client_1_1_user_response.xhtml">UserResponse</a> SimpleSidecarClient::createUser </td>
          <td>(</td>
          <td class="paramtype">const String &amp;&#160;</td>
          <td class="paramname"><em>username</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const String &amp;&#160;</td>
          <td class="paramname"><em>password</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create a new user account with Sidecar. Use this on first run of application if the <a class="el" href="class_simple_sidecar_client.xhtml#a16f32a877a5c97f429ff0b548465a76c">authenticate</a> method returned an invalid (not 200) <code>responseCode</code>. </p>
<p>If the method returns with empty key/secret pair, it generally indicates that the username is taken or username/password failed format/length rules.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">username</td><td>The username preferred by user (email format) </td></tr>
    <tr><td class="paramname">password</td><td>The password to associate with user account (8-20 char length) </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Return a <a class="el" href="struct_simple_sidecar_client_1_1_user_response.xhtml" title="A simple data structure that represents the response from Sidecar Provisioning API. ">UserResponse</a> struct with key/secret pair populated on success. </dd></dl>

</div>
</div>
<a class="anchor" id="a873fcff651334ffa567ba424a86b5fb8"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const String SimpleSidecarClient::currentTime </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return the current date/time in ISO 8601 format. </p>

</div>
</div>
<a class="anchor" id="a059cd1d4077bb027321bf78c777ebc25"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int64_t SimpleSidecarClient::currentTimeMillis </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return the milli seconds since UNIX epoch. </p>

</div>
</div>
<a class="anchor" id="ac8eba1426e448c02b52f49c95db16efb"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const String SimpleSidecarClient::date </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return the current date in ISO 8601 format. </p>

</div>
</div>
<a class="anchor" id="a3777df171e3474854445fde0ff299799"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int16_t SimpleSidecarClient::deleteUser </td>
          <td>(</td>
          <td class="paramtype">const String &amp;&#160;</td>
          <td class="paramname"><em>username</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const String &amp;&#160;</td>
          <td class="paramname"><em>password</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>deleteUser Deprovision a user from the system. Removes the user account, access key/secret and devices associated with the user. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">username</td><td>The username of the user account </td></tr>
    <tr><td class="paramname">password</td><td>The password for the user account. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The HTTP response code returned by Sidecar. Response code <code>204</code> indicates success. </dd></dl>

</div>
</div>
<a class="anchor" id="a8b73149ff9c868aa4ddd516e1bc32869"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void SimpleSidecarClient::initAPIKey </td>
          <td>(</td>
          <td class="paramtype">const String &amp;&#160;</td>
          <td class="paramname"><em>apiKey</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const String &amp;&#160;</td>
          <td class="paramname"><em>apiSecret</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Initialise the API with the API key and secret used to sign provisioning requests. This is usually the first step in initialising the API for a device. Users must register their application with Sidecar and specify the generated API access key and secret.</p>
<p>Calling applications will generally store the API key and secret in flash storage using <code>PROGMEM</code> and use that to initialise the API on each run of the application. </p>

</div>
</div>
<a class="anchor" id="a57814a206ef34093f779841f0c250587"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void SimpleSidecarClient::initEventAPI </td>
          <td>(</td>
          <td class="paramtype">const String &amp;&#160;</td>
          <td class="paramname"><em>streamId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const String &amp;&#160;</td>
          <td class="paramname"><em>deviceUUID</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>latitude</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>longitude</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Initialise the Sidecar Event API. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">streamId</td><td>The user defined stream name </td></tr>
    <tr><td class="paramname">deviceUUID</td><td>The device identifier for the hardware, this value should be considered static (e.g., a MAC Address). </td></tr>
    <tr><td class="paramname">latitude</td><td>Latitude for current device location </td></tr>
    <tr><td class="paramname">longitude</td><td>Longitude for current device location </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a4aa20b32411af5bf15f1b3e1538baf94"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void SimpleSidecarClient::initNetworkType </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_simple_sidecar_client.xhtml#ae727e1760c4ff910d3c1ea307a5f33ca">NetworkType</a>&#160;</td>
          <td class="paramname"><em>type</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Initialise the API to use the specified type. </p>

</div>
</div>
<a class="anchor" id="a6460635f3bda30c0e2607840778ce911"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void SimpleSidecarClient::initUserKey </td>
          <td>(</td>
          <td class="paramtype">const String &amp;&#160;</td>
          <td class="paramname"><em>userKey</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const String &amp;&#160;</td>
          <td class="paramname"><em>userSecret</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Initialise the API with the user key and secret used to sign event requests. This step can be performed after provisioning a user account for a device. Use the provisioning API</p>
<p>Calling applications will generally store the user access key and secret in flash storage using <code>PROGMEM</code> and use that to initialise the API on each run of the application. </p>

</div>
</div>
<a class="anchor" id="a011da9dd9e7360bf8c28ef2d0e0573bc"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void SimpleSidecarClient::initUUID </td>
          <td>(</td>
          <td class="paramtype">byte&#160;</td>
          <td class="paramname"><em>mac</em>[6]</td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Initialise UUID engine. If using WiFi, the WiFi api provides a way to look up current MAC address. That would be better to get proper UUID values. </p>

</div>
</div>
<a class="anchor" id="ab8d2d475e584604dcf41492cd302a631"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void SimpleSidecarClient::initUUID </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Initialise UUID engine using a random seed. </p>

</div>
</div>
<a class="anchor" id="ac09167a37d178cfebc868bbc591101f6"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool SimpleSidecarClient::publish </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>publish Publish the built up event to the Sidecar Event API. Invoke <a class="el" href="class_simple_sidecar_client.xhtml#ab04bc09dbf1c36259edcb28f5a3d7b13">addReading</a> with the individual readings that are part of the current event, and <a class="el" href="class_simple_sidecar_client.xhtml#a62350e839bccc7d23c986d38d11ed874">addTag</a> as needed to build up a complete event before publishing to Sidecar. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns <code>true</code> if publish succeeded. </dd></dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>/Users/rakesh/svn/customer/qsense/desktop/src/api/<a class="el" href="_simple_sidecar_client_8h.xhtml">SimpleSidecarClient.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="class_simple_sidecar_client.xhtml">SimpleSidecarClient</a></li>
    <li class="footer">Generated on Fri Oct 23 2015 17:52:33 for QSense Sidecar Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.9.1 </li>
  </ul>
</div>
</body>
</html>
