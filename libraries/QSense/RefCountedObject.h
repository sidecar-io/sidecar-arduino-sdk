/*
 * RefCountedObject.h
 *
 * Definition of the RefCountedObject class.
 *
 * Copyright (c) 2004-2009, Applied Informatics Software Engineering GmbH.
 * and Contributors.
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
*/

#ifndef QSENSE_REFCOUNTEDOBJECT
#define QSENSE_REFCOUNTEDOBJECT

#if defined( ARDUINO )
#include "QSense.h"
#else
#include <QSense.h>
#endif


namespace qsense
{
/// A base class for objects that employ
/// reference counting based garbage collection.
///
/// Reference-counted objects inhibit construction
/// by copying and assignment.
class RefCountedObject
{
public:
  /// Creates the RefCountedObject.
  /// The initial reference count is one.
  RefCountedObject() : refcount( 1 ) {}

  /// Increments the object's reference count.
  void duplicate() const { ++refcount; }

  /// Decrements the object's reference count
  /// and deletes the object if the count
  /// reaches zero.
  void release() const;
    
  /// Returns the reference count.
  int referenceCount() const { return refcount; }

protected:
  /// Destroys the RefCountedObject.
  virtual ~RefCountedObject() {}

private:
  RefCountedObject( const RefCountedObject& );
  RefCountedObject& operator = ( const RefCountedObject& );

  mutable uint8_t refcount;
};


inline void RefCountedObject::release() const
{
  if  ( --refcount == 0 ) delete this;
}

} // namespace qsense


#endif // QSENSE_REFCOUNTEDOBJECT
