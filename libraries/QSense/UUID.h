/*
 Copyright (c) 2004-2006, Applied Informatics Software Engineering GmbH.
 and Contributors.

 Permission is hereby granted, free of charge, to any person or organization
 obtaining a copy of the software and accompanying documentation covered by
 this license (the "Software") to use, reproduce, display, distribute,
 execute, and transmit the Software, and to prepare derivative works of the
 Software, and to permit third-parties to whom the Software is furnished to
 do so, all subject to the following:

 The copyright notices in the Software and this entire statement, including
 the above license grant, this restriction and the following disclaimer,
 must be included in all copies of the Software, in whole or in part, and
 all derivative works of the Software, unless such copies or derivative
 works are solely in the form of machine-executable object code generated by
 a source language processor.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 DEALINGS IN THE SOFTWARE.
*/

#ifndef QSENSE_UUID_H
#define QSENSE_UUID_H

#if defined( ARDUINO )
#include "QSense.h"
#else
#include <QSense.h>
#endif

namespace qsense
{
  /**
   * @brief A class that represents a UUID/GUID
   *
   * A UUID is an identifier that is unique across both space and time,
   * with respect to the space of all UUIDs. Since a UUID is a fixed
   * size and contains a time field, it is possible for values to
   * rollover (around A.D. 3400, depending on the specific algorithm
   * used). A UUID can be used for multiple purposes, from tagging
   * objects with an extremely short lifetime, to reliably identifying
   * very persistent objects across a network.
   *
   * This class implements a Universal Unique Identifier,
   * as specified in Appendix A of the DCE 1.1 Remote Procedure
   * Call Specification (http://www.opengroup.org/onlinepubs/9629399/),
   * RFC 2518 (WebDAV), section 6.4.1 and the UUIDs and GUIDs internet
   * draft by Leach/Salz from February, 1998
   * (http://www.ics.uci.edu/~ejw/authoring/uuid-guid/draft-leach-uuids-guids-01.txt)
   * and also http://tools.ietf.org/html/draft-mealling-uuid-urn-05
   */
  class UUID
  {
  public:
    enum Version
    {
      UUID_TIME_BASED = 0x01,
      UUID_DCE_UID    = 0x02,
      UUID_NAME_BASED = 0x03,
      UUID_RANDOM     = 0x04
    };

    /// Creates a nil (all zero) UUID.
    UUID();

    /// Copy constructor.
    UUID( const UUID& uuid );

    /// Parses the UUID from a string.
    explicit UUID( const QString& uuid );

    /// Parses the UUID from a char array.
    explicit UUID( const char* uuid );

    /// Destroys the UUID.
    ~UUID();

    /// Assignment operator.
    UUID& operator = ( const UUID& uuid );

    /**
     * @brief Tries to interpret the given string as an UUID.
     * @param uuid The value to parse
     * @return If the UUID is syntactically valid, assigns the
     *   members and returns true. Otherwise leaves the
     *   object unchanged and returns false.
     */
    bool parse( const QString& uuid );

    /**
     * @brief Returns a string representation of the UUID
     * consisting of groups of hexadecimal digits separated by hyphens.
     */
    QString toString() const;

    /**
     * @brief Copies the UUID (16 bytes) from a buffer or byte array.
     * The UUID fields are expected to be stored in network byte order.
     * @param buffer The buffer need not be aligned.
     */
    void copyFrom( const char* buffer );

    /**
     * @brief Copies the UUID to the buffer.
     * The fields are in network byte order. The buffer need not be aligned.
     * @param buffer There must be room for at least 16 bytes.
     */
    void copyTo( char* buffer ) const;

    /// Returns the version of the UUID.
    Version version() const;

    /**
     * @brief Returns the variant number of the UUID:
     * @return
     *   - 0 reserved for NCS backward compatibility
     *   - 2 the Leach-Salz variant (used by this class)
     *   - 6 reserved, Microsoft Corporation backward compatibility
     *   - 7 reserved for future definition
     */
    int variant() const;

    bool operator == ( const UUID& uuid ) const;
    bool operator != ( const UUID& uuid ) const;
    bool operator <  ( const UUID& uuid ) const;
    bool operator <= ( const UUID& uuid ) const;
    bool operator >  ( const UUID& uuid ) const;
    bool operator >= ( const UUID& uuid ) const;

    /// @return Returns true if the UUID is nil (in other words, consists of all zeros).
    bool isNull() const;

    /// Returns a null/nil UUID.
    static const UUID& null();

    /// Returns the namespace identifier for the DNS namespace.
    static const UUID& dns();

    /// Returns the namespace identifier for the URI (former URL) namespace.
    static const UUID& uri();

    /// Returns the namespace identifier for the OID namespace.
    static const UUID& oid();

    /// Returns the namespace identifier for the X500 namespace.
    static const UUID& x500();

    /// Generate a time based UUID instance
    static const UUID create();

    /**
     * @brief Initialise the UUID engine.  On application start,
     * invoke with the current MAC address.
     * @param node The MAC address.
     */
    static void init( uint8_t node[6] );

  protected:
    UUID( uint32_t timeLow, uint32_t timeMid, uint32_t timeHiAndVersion,
      uint16_t clockSeq, uint8_t node[6] );

    UUID( const char* bytes, Version version );
    int compare( const UUID& uuid ) const;
    static void appendHex( QString& str, uint8_t n );
    static void appendHex( QString& str, uint16_t n );
    static void appendHex( QString& str, uint32_t n );
    static uint8_t nibble( char hex );
    void fromNetwork();
    void toNetwork();
    static uint32_t randomNumber( int32_t input );

  private:
    uint32_t timeLow;
    uint16_t timeMid;
    uint16_t timeHiAndVersion;
    uint16_t clockSeq;
    uint8_t node[6];
  };


  inline bool UUID::operator == (const UUID& uuid) const
  {
    return compare(uuid) == 0;
  }


  inline bool UUID::operator != (const UUID& uuid) const
  {
    return compare(uuid) != 0;
  }


  inline bool UUID::operator < (const UUID& uuid) const
  {
    return compare(uuid) < 0;
  }


  inline bool UUID::operator <= (const UUID& uuid) const
  {
    return compare(uuid) <= 0;
  }


  inline bool UUID::operator > (const UUID& uuid) const
  {
    return compare(uuid) > 0;
  }


  inline bool UUID::operator >= (const UUID& uuid) const
  {
    return compare(uuid) >= 0;
  }


  inline UUID::Version UUID::version() const
  {
    return Version( timeHiAndVersion >> 12 );
  }


  inline bool UUID::isNull() const
  {
    return compare( null() ) == 0;
  }

  /// Serialise the string representation of the UUID to the output stream
  inline std::ostream& operator << ( std::ostream& os, const UUID& uuid )
  {
    os << uuid.toString();
    return os;
  }

} // namespace qsense

#endif // QSENSE_UUID_H
