/*
 Copyright (c) 2004-2006, Applied Informatics Software Engineering GmbH.
 and Contributors.

 Permission is hereby granted, free of charge, to any person or organization
 obtaining a copy of the software and accompanying documentation covered by
 this license (the "Software") to use, reproduce, display, distribute,
 execute, and transmit the Software, and to prepare derivative works of the
 Software, and to permit third-parties to whom the Software is furnished to
 do so, all subject to the following:

 The copyright notices in the Software and this entire statement, including
 the above license grant, this restriction and the following disclaimer,
 must be included in all copies of the Software, in whole or in part, and
 all derivative works of the Software, unless such copies or derivative
 works are solely in the form of machine-executable object code generated by
 a source language processor.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 DEALINGS IN THE SOFTWARE.
*/

#include "UUID.h"
#include "ByteOrder.h"
#if defined( ARDUINO )
#include "string.h"
#include "../StandardCplusplus/algorithm"
#include "DateTime.h"
#else
#include <algorithm>
#include <cstring>
#include <net/DateTime.h>
#endif

namespace qsense
{
  namespace data
  {
    static uint8_t mac[6];
    static bool UUIDInitialised = false;
  }
}


using qsense::ByteOrder;
using qsense::QString;
using qsense::UUID;


UUID::UUID():  timeLow( 0 ),  timeMid( 0 ), timeHiAndVersion( 0 ), clockSeq( 0 )
{
  memset( node, 0, sizeof( node ) );
}


UUID::UUID( const UUID& uuid ):
  timeLow( uuid.timeLow ), timeMid( uuid.timeMid ),
  timeHiAndVersion( uuid.timeHiAndVersion ), clockSeq( uuid.clockSeq )
{
  memcpy( node, uuid.node, sizeof( node ) );
}


UUID::UUID( const QString& uuid )
{
  parse( uuid );
}

  
UUID::UUID( const char* uuid )
{
  parse( QString( uuid ) );
}


UUID::UUID( uint32_t tl, uint32_t tm, uint32_t thv, uint16_t cs, uint8_t n[6] ):
  timeLow( tl ), timeMid( tm ), timeHiAndVersion( thv ), clockSeq( cs )
{
  memcpy( node, n, sizeof( node ) );
}


UUID::UUID( const char* bytes, Version version )
{
  uint32_t i32;
  uint16_t i16;

  memcpy( &i32, bytes, sizeof(i32) );
  timeLow = ByteOrder::fromNetwork(i32);
  bytes += sizeof(i32);

  memcpy( &i16, bytes, sizeof(i16) );
  timeMid = ByteOrder::fromNetwork(i16);
  bytes += sizeof(i16);

  memcpy( &i16, bytes, sizeof(i16) );
  timeHiAndVersion = ByteOrder::fromNetwork(i16);
  bytes += sizeof(i16);

  memcpy( &i16, bytes, sizeof(i16) );
  clockSeq = ByteOrder::fromNetwork(i16);
  bytes += sizeof(i16);

  memcpy( node, bytes, sizeof(node) );

  timeHiAndVersion &= 0x0FFF;
  timeHiAndVersion |= ( version << 12 );
  clockSeq &= 0x3FFF;
  clockSeq |= 0x8000;
}


UUID::~UUID() {}


UUID& UUID::operator = ( const UUID& uuid )
{
  if ( &uuid != this )
  {
    timeLow = uuid.timeLow;
    timeMid = uuid.timeMid;
    timeHiAndVersion = uuid.timeHiAndVersion;
    clockSeq = uuid.clockSeq;
    memcpy( node, uuid.node, sizeof( node ) );
  }

  return *this;
}


bool UUID::parse( const QString& uuid )
{
  if ( uuid.size() < 32 ) return false;

  bool haveHyphens = false;
  if ( uuid[8] == '-' && uuid[13] == '-' && uuid[18] == '-' && uuid[23] == '-' )
  {
    if ( uuid.size() >= 36 )  haveHyphens = true;
    else return false;
  }
  
  QString::const_iterator it = uuid.begin();
  timeLow = 0;

  for ( int i = 0; i < 8; ++i )
  {
    timeLow = (timeLow << 4) | nibble(*it++);
  }
  if ( haveHyphens ) ++it;

  timeMid = 0;
  for ( int i = 0; i < 4; ++i )
  {
    timeMid = (timeMid << 4) | nibble(*it++);
  }
  if ( haveHyphens ) ++it;

  timeHiAndVersion = 0;
  for ( int i = 0; i < 4; ++i )
  {
    timeHiAndVersion = (timeHiAndVersion << 4) | nibble(*it++);
  }
  if ( haveHyphens ) ++it;

  clockSeq = 0;
  for ( int i = 0; i < 4; ++i )
  {
    clockSeq = (clockSeq << 4) | nibble(*it++);
  }
  if ( haveHyphens ) ++it;

  for ( int i = 0; i < 6; ++i )
  {
    node[i] = (nibble(*it++) << 4) | nibble(*it++) ;
  }

  return true;
}


QString UUID::toString() const
{
  QString result;
  result.reserve( 36 );

  appendHex( result, timeLow );
  result += '-';
  appendHex( result, timeMid );
  result += '-';
  appendHex( result, timeHiAndVersion );
  result += '-';
  appendHex( result, clockSeq );
  result += '-';
  for ( unsigned int i = 0; i < sizeof(node); ++i ) appendHex( result, node[i] );

  return result;
}


void UUID::copyFrom( const char* buffer )
{
  uint32_t i32;
  uint16_t i16;

  memcpy( &i32, buffer, sizeof(i32) );
  timeLow = ByteOrder::fromNetwork( i32 );
  buffer += sizeof(i32);

  memcpy( &i16, buffer, sizeof(i16) );
  timeMid = ByteOrder::fromNetwork( i16 );
  buffer += sizeof(i16);

  memcpy( &i16, buffer, sizeof(i16) );
  timeHiAndVersion = ByteOrder::fromNetwork(i16);
  buffer += sizeof(i16);

  memcpy( &i16, buffer, sizeof(i16) );
  clockSeq = ByteOrder::fromNetwork(i16);
  buffer += sizeof(i16);

  memcpy( node, buffer, sizeof(node) );
}


void UUID::copyTo( char* buffer ) const
{
  uint32_t i32 = ByteOrder::toNetwork( timeLow );
  memcpy( buffer, &i32, sizeof(i32) );
  buffer += sizeof(i32);

  uint16_t i16 = ByteOrder::toNetwork( timeMid );
  memcpy( buffer, &i16, sizeof(i16) );
  buffer += sizeof(i16);

  i16 = ByteOrder::toNetwork( timeHiAndVersion );
  memcpy( buffer, &i16, sizeof(i16) );
  buffer += sizeof(i16);

  i16 = ByteOrder::toNetwork( clockSeq );
  memcpy( buffer, &i16, sizeof(i16) );
  buffer += sizeof(i16);
  memcpy( buffer, node, sizeof(node) );
}


int UUID::variant() const
{
  int v = clockSeq >> 13;
  if ( (v & 6) == 6 ) return v;
  else if ( v & 4 ) return 2;
  else return 0;
}


int UUID::compare( const UUID& uuid ) const
{
  if ( timeLow != uuid.timeLow ) return timeLow < uuid.timeLow ? -1 : 1;
  if ( timeMid != uuid.timeMid ) return timeMid < uuid.timeMid ? -1 : 1;
  if ( timeHiAndVersion != uuid.timeHiAndVersion ) return timeHiAndVersion < uuid.timeHiAndVersion ? -1 : 1;
  if ( clockSeq != uuid.clockSeq ) return clockSeq < uuid.clockSeq ? -1 : 1;

  for ( unsigned int i = 0; i < sizeof(node); ++i )
  {
    if (node[i] < uuid.node[i]) return -1;
    else if (node[i] > uuid.node[i]) return 1;
  }

  return 0;
}


void UUID::appendHex( QString& str, uint8_t n )
{
  static const char* digits = "0123456789abcdef";
  str += digits[(n >> 4) & 0xF];
  str += digits[n & 0xF];
}


void UUID::appendHex( QString& str, uint16_t n )
{
  appendHex( str, uint8_t( n >> 8 ) );
  appendHex( str, uint8_t( n & 0xFF ) );
}


void UUID::appendHex( QString& str, uint32_t n )
{
  appendHex( str, uint16_t( n >> 16 ) );
  appendHex( str, uint16_t( n & 0xFFFF ) );
}


uint8_t UUID::nibble( char hex )
{
  if ( hex >= 'a' && hex <= 'f' ) return uint8_t( hex - 'a' + 10 );
  else if ( hex >= 'A' && hex <= 'F' ) return uint8_t( hex - 'A' + 10 );
  else if ( hex >= '0' && hex <= '9' ) return uint8_t( hex - '0' );
  else return uint8_t( 0 );
}


void UUID::fromNetwork()
{
  timeLow = ByteOrder::fromNetwork( timeLow );
  timeMid = ByteOrder::fromNetwork( timeMid );
  timeHiAndVersion = ByteOrder::fromNetwork( timeHiAndVersion );
  clockSeq = ByteOrder::fromNetwork( clockSeq );
}


void UUID::toNetwork()
{
  timeLow = ByteOrder::toNetwork( timeLow );
  timeMid = ByteOrder::toNetwork( timeMid );
  timeHiAndVersion = ByteOrder::toNetwork( timeHiAndVersion );
  clockSeq = ByteOrder::toNetwork( clockSeq );
}


uint32_t UUID::randomNumber( int32_t x )
{
  int32_t hi, lo;

  if ( x == 0 ) x = 123459876;
  hi = x / 127773;
  lo = x % 127773;
  x = 16807 * lo - 2836 * hi;
  if ( x < 0 ) x += 0x7FFFFFFF;

  return x;
}


namespace
{
  static UUID uuidNull;
  static UUID uuidDNS( "6ba7b810-9dad-11d1-80b4-00c04fd430c8" );
  static UUID uuidURI( "6ba7b811-9dad-11d1-80b4-00c04fd430c8" );
  static UUID uuidOID( "6ba7b812-9dad-11d1-80b4-00c04fd430c8" );
  static UUID uuidX500( "6ba7b814-9dad-11d1-80b4-00c04fd430c8" );
}


const UUID& UUID::null()
{
  return uuidNull;
}


const UUID& UUID::dns()
{
  return uuidDNS;
}

  
const UUID& UUID::uri()
{
  return uuidURI;
}


const UUID& UUID::oid()
{
  return uuidOID;
}


const UUID& UUID::x500()
{
  return uuidX500;
}


const UUID UUID::create()
{
  using qsense::net::DateTime;
  int64_t millis = DateTime::singleton().currentTimeMillis();

  uint32_t timeLow = uint32_t( millis & 0xFFFFFFFF );
  uint16_t timeMid = uint16_t( ( millis >> 32 ) & 0xFFFF );
  uint16_t timeHiAndVersion = uint16_t( ( millis >> 48 ) & 0x0FFF ) + ( UUID::UUID_TIME_BASED << 12 );
  uint16_t clockSeq = ( uint16_t( randomNumber( timeLow ) >> 4 ) & 0x3FFF) | 0x8000;

  return UUID( timeLow, timeMid, timeHiAndVersion, clockSeq, qsense::data::mac );
}


void UUID::init( uint8_t node[6] )
{
  if ( ! qsense::data::UUIDInitialised )
  {
    for ( int i = 0; i < 6; ++i ) qsense::data::mac[i] = node[i];
    qsense::data::UUIDInitialised = true;
  }
}
